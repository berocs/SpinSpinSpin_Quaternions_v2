function                                                                     ...
[                                                                            ...
  arrowPatchGraphicsHandle                                                   ...
] =                                                                          ...
mArrow3Create                                                                ...
 (                                                                           ...
   arrowStartPoint,                                                          ...
   arrowEndPoint,                                                            ...
   varargin                                                                  ...
 )
%===============================================================================
%|
%|  FUNCTION:
%|    mArrow3Create
%|
%|  PURPOSE:
%|    Create a plot of a 3D arrow as patch object ( cylinder + cone ).
%|
%|  INPUT(s):
%|
%|    arrowStartPoint
%|       Arrow vector starting point in 3D.
%|
%|    arrowEndPoint
%|       Arrow vector   ending point in 3D.
%|
%|    varargin
%|       Variable list of arguments in the format:
%|
%|         'PropertyValue',         PropertyValue
%|
%|  OUTPUT(s):
%|
%|    arrowPatchGraphicsHandle
%|       Handle to arrow vector 3D graphics patch object.
%|
%|
%|  SYNTAX:
%|    [ 1 ] Simple:
%|
%|            [                                            ...
%|              arrowPatchGraphicsHandle                   ...
%|            ] = mArrow3Create                            ...
%|                 (                                       ...
%|                   arrowStartPoint,                      ...
%|                   arrowEndPoint                         ...
%|                 );
%|
%|    [ 2 ] Involved:
%|
%|            [                                            ...
%|              arrowPatchGraphicsHandle                   ...
%|            ] = mArrow3Create                            ...
%|                 (                                       ...
%|                   arrowStartPoint,                      ...
%|                   arrowEndPoint,                        ...
%|                   'PropertyName',    PropertyValue      ...
%|                 );
%|
%|  NOTE(s):
%|
%|    [ 1 ]  Properties List:
%|
%|             [ 1.1 ] 'Color'        color according to MATLAB specification
%|                                    (see MATLAB help item 'ColorSpec')
%|
%|             [ 1.2 ] 'StemWidth'    Width of the line.
%|
%|             [ 1.3 ] 'TipWidth'     Width of the arrow cone.
%|
%|             [ 1.4 ] In addition:   You can specify any patch object
%|                                    properties.
%|                                    (For example,
%|                                     you can make the arrow semitransparent
%|                                     by using property 'faceAlpha'.)
%|
%|    [ 2 ]  Use light to achieve 3D impression.
%|
%|    [ 3 ]  A patch graphics object is composed of one or more polygons that may
%|           or may not be connected.
%|           Patches are useful for modeling real-world objects such as airplanes
%|           or automobiles,
%|           and for drawing 2- or 3-D polygons of arbitrary shape.
%|
%|           [ 3.1 ]  In contrast, surface objects are rectangular grids of
%|                    quadrilaterals and are better suited for displaying planar
%|                    topographies such as the values of mathematical functions
%|                    of two variables, the contours of data in a rectangular
%|                    plane, or parameterized surfaces such as spheres.
%|
%|           [ 3.2 ]  A number of MATLAB® functions create patch objects —
%|                    fill, fill3, isosurface, isocaps, some of the contour
%|                    functions, and patch.
%|
%|  EXAMPLE(s):
%|                       
%|    [ 1 ]  Draw an arrow from starting point to ending point with
%|           default properties:
%|
%|           startingPoint = [ 0.0; 0.0; 0.0 ];
%|
%|             endingPoint = [ 1.0; 1.0; 1.0 ];
%|
%|           [                                           ...
%|             arrowPatchGraphicsHandle                  ...
%|           ] = mArrow3Create                           ...
%|                (                                      ...
%|                  startingPoint,                       ...
%|                    endingPoint                        ...
%|                );
%|
%|    [ 2 ]  Draw an arrow from starting point to ending point with:
%|             [ 2.1 ]  Red color.
%|             [ 2.2 ]  Arrow stem width of 0.015.
%|             [ 2.3 ]  Arrow cone width of 0.030.
%|             [ 2.4 ]  One half semi-transparency.
%|
%|           startingPoint = [ 0.0; 0.0; 0.0 ];
%|             endingPoint = [ 1.0; 1.0; 1.0 ];
%|
%|           [                                           ...
%|             arrowPatchGraphicsHandle                  ...
%|           ] = mArrow3Create                           ...
%|                (                                      ...
%|                  startingPoint,                       ...
%|                    endingPoint,                       ...
%|                  'Color',               'Red',        ...
%|                  'StemWidth',           0.02,         ...
%|                  'TipWidth',            0.01,         ...
%|                  'FaceAlpha',           0.50          ...
%|                );
%|
%|
%===============================================================================

%===============================================================================
%        1         2         3         4         5         6         7         8
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%===============================================================================

%{------------------------------------------------------------------------------
   minimumExpectedNumberInputArgs = 2;
%-------------------------------------------------------------------------------
   actualNumberInputArgs          = nargin;
   actualNumberOutputArgs         = nargout;
%-------------------------------------------------------------------------------
   if( actualNumberInputArgs >= minimumExpectedNumberInputArgs )
    %{--------------------------------------------------------------------------
    %  Have encountered minimum expected number of input arguments.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Continue processing.
    %---------------------------------------------------------------------------
       startDimension = length( arrowStartPoint );
         endDimension = length(   arrowEndPoint );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       if(                                                                   ...
           ( startDimension == endDimension ) &&                             ...
           (                                                                 ...
             ( startDimension == 2 ) ||                                      ...
             ( startDimension == 3 )                                         ...
           )                                                                 ...
         )
        %{----------------------------------------------------------------------
        %  Starting point and ending point are:
        %    [ 1 ]  Of the same dimension.
        %    [ 2 ]  Both two or three dimensional.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Continue processing.
        %-----------------------------------------------------------------------
           [                                                                 ...
             arrowPatchGraphicsHandle                                        ...
           ] = mArrow3_2Create                                               ...
                (                                                            ...
                  arrowStartPoint,                                           ...
                  arrowEndPoint,                                             ...
                  varargin{ : }                                              ...
                );
        %}----------------------------------------------------------------------
       else
        %{----------------------------------------------------------------------
        %  Starting point and ending point are not of the same dimension.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Generate an error message.
        %-----------------------------------------------------------------------
           STDOUT = 1;
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
           [                                                                 ...
             errorMessageString                                              ...
           ] =                                                               ...
           sprintf                                                           ...
            (                                                                ...
              [                                                              ...
                '\n\n\n'                                                     ...
                '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                   ...
                '\n\n\n'                                                     ...
              ],                                                             ...
              '===========================================================', ...
              '|',                                                           ...
              '| ERROR:',                                                    ...
              '|',                                                           ...
              '|   Starting point and ending point:',                        ...
              '|     [ 1 ]  Are not both 2 dimensional.',                    ...
              '|     OR',                                                    ...
              '|     [ 2 ]  Are not both 3 dimensional.',                    ...
              '|',                                                           ...
              '==========================================================='  ...
            );
        %-----------------------------------------------------------------------
        %  Display the error message
        %-----------------------------------------------------------------------
           fprintf                                                           ...
            (                                                                ...
              STDOUT,                                                        ...
              '%s',                                                          ...
              errorMessageString                                             ...
            );
        %-----------------------------------------------------------------------
        %  Generate purpose message
        %-----------------------------------------------------------------------
           STDOUT = 1;
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
           [                                                                 ...
             purposeMessageString                                            ...
           ] = generatePurposeMessage(  );
        %-----------------------------------------------------------------------
        %  Generate usage message
        %-----------------------------------------------------------------------
           [                                                                 ...
             usageMessageString                                              ...
           ] = generateUsageMessage(  );
        %-----------------------------------------------------------------------
        %  Display the purpose message
        %-----------------------------------------------------------------------
           fprintf                                                           ...
            (                                                                ...
              STDOUT,                                                        ...
              '%s',                                                          ...
              purposeMessageString                                           ...
            );
        %-----------------------------------------------------------------------
        %  Display the usage message
        %-----------------------------------------------------------------------
           fprintf                                                           ...
            (                                                                ...
              STDOUT,                                                        ...
              '%s',                                                          ...
              usageMessageString                                             ...
            );
        %-----------------------------------------------------------------------
           arrowPatchGraphicsHandle= [ ];
        %}----------------------------------------------------------------------
       end;
    %}--------------------------------------------------------------------------
   else
    %{--------------------------------------------------------------------------
    %  Have not encountered minimum expected number of input arguments.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Generate an error message.
    %---------------------------------------------------------------------------
       STDOUT = 1;
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       [                                                                     ...
         errorMessageString                                                  ...
       ] =                                                                   ...
       sprintf                                                               ...
        (                                                                    ...
          [                                                                  ...
            '\n\n\n'                                                         ...
            '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                       ...
            '\n\n\n'                                                         ...
          ],                                                                 ...
          '===============================================================', ...
          '|',                                                               ...
          '| ERROR:',                                                        ...
          '|',                                                               ...
          '|   Have not encountered minimum expected number of input',       ...
          '|   arguments.',                                                  ...
          '|',                                                               ...
          '|   Expect at least two input arguments.',                        ...
          '|',                                                               ...
          '==============================================================='  ...
        );
    %---------------------------------------------------------------------------
    %  Display the error message
    %---------------------------------------------------------------------------
       fprintf                                                               ...
        (                                                                    ...
          STDOUT,                                                            ...
          '%s',                                                              ...
          errorMessageString                                                 ...
        );
    %---------------------------------------------------------------------------
    %  Generate purpose message
    %---------------------------------------------------------------------------
       STDOUT = 1;
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       [                                                                     ...
         purposeMessageString                                                ...
       ] = generatePurposeMessage(  );
    %---------------------------------------------------------------------------
    %  Generate usage message
    %---------------------------------------------------------------------------
       [                                                                     ...
         usageMessageString                                                  ...
       ] = generateUsageMessage(  );
    %---------------------------------------------------------------------------
    %  Display the purpose message
    %---------------------------------------------------------------------------
       fprintf                                                               ...
        (                                                                    ...
          STDOUT,                                                            ...
          '%s',                                                              ...
          purposeMessageString                                               ...
        );
    %---------------------------------------------------------------------------
    %  Display the usage message
    %---------------------------------------------------------------------------
       fprintf                                                               ...
        (                                                                    ...
          STDOUT,                                                            ...
          '%s',                                                              ...
          usageMessageString                                                 ...
        );
    %---------------------------------------------------------------------------
       arrowPatchGraphicsHandle= [ ];
    %}--------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
   return;
%}------------------------------------------------------------------------------


%===============================================================================
function                                                                     ...
[                                                                            ...
  arrowPatchGraphicsHandle                                                   ...
] =                                                                          ...
mArrow3_2Create                                                              ...
 (                                                                           ...
   arrowStartPoint,                                                          ...
   arrowEndPoint,                                                            ...
   varargin                                                                  ...
 )

%{------------------------------------------------------------------------------
   actualNumberInputArgs = nargin;
%-------------------------------------------------------------------------------
   standardMatlabPropertyNamesCellArray  = { 'EdgeColor' };    
   standardMatlabPropertyValuesCellArray = {      'none' };    
%-------------------------------------------------------------------------------
%  Evaluate property specifications (Property Names with Property Values).
%-------------------------------------------------------------------------------
   for( propertyIndex = [ 1 : 2 : ( actualNumberInputArgs - 2 ) ] )
     %{-------------------------------------------------------------------------
        currentPropertyName          = varargin{ propertyIndex     };
        currentPropertyValue         = varargin{ propertyIndex + 1 };
     %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        currentPropertyNameLowerCase = lower( currentPropertyName );
     %--------------------------------------------------------------------------
        switch( currentPropertyNameLowerCase )
             %{-----------------------------------------------------------------
                case( 'color' )
                   %{-----------------------------------------------------------
                   %  Current property name is the color of the arrow.
                   %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                   %  This property is a starnard Matlab property.
                   %------------------------------------------------------------
                      standardMatlabPropertyNamesCellArray =                 ...
                              {                                              ...
                                standardMatlabPropertyNamesCellArray{ : },   ...
                                'FaceColor'                                  ...
                              };
                      standardMatlabPropertyValuesCellArray =                ...
                              {                                              ...
                                standardMatlabPropertyValuesCellArray{ : },  ...
                                currentPropertyValue                         ...
                              };
                   %}-----------------------------------------------------------
             %------------------------------------------------------------------
                case( 'stemwidth' )
                   %{-----------------------------------------------------------
                   %  Current property name is the width of the arrow stem.
                   %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                   %  Check the property value.
                   %------------------------------------------------------------
                      if(                                                    ...
                          ( isnumeric( currentPropertyValue ) == true ) &&   ...
                          ( isreal(    currentPropertyValue ) == true ) &&   ...
                          (            currentPropertyValue   >= 0.0  )      ...
                        )
                       %{-------------------------------------------------------
                       %  Current arrow stem width is a positive real number.
                       %- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                       %  Assign current property value as the arrow
                       %  stem width.
                       %--------------------------------------------------------
                          stemWidth = currentPropertyValue;
                       %}-------------------------------------------------------
                      else
                       %{-------------------------------------------------------
                       %  Current arrow stem width is not a positive real
                       %  number.
                       %- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                       %  Generate a default value for arrow stem width.
                       %--------------------------------------------------------
                          if( exist( 'stemWidth', 'var' ) == false )
                           %{---------------------------------------------------
                           %  The arrow stem width variable has not yet been
                           %  created.
                           %- - - - - - - - - - - - - - - - - - - - - - - - - - 
                           %  Determine a default value for the arrow stem
                           %  width (based on the plot dimensionality).
                           %----------------------------------------------------
                              axesLimitValues       = axis;
                              numberAxesLimitValues = numel( axesLimitValues );
                           %- - - - - - - - - - - - - - - - - - - - - - - - - - 
                              if( numberAxesLimitValues == 4 )
                               %{-----------------------------------------------
                               %  There are four axes limit values.
                               %- - - - - - - - - - - - - - - - - - - - - - - - 
                               %  This plot must be two dimensional.
                               %- - - - - - - - - - - - - - - - - - - - - - - - 
                               %  Determine the default arrow stem width
                               %  for a two dimensional plot.
                               %------------------------------------------------
                                  maximumAxesValues  = axesLimitValues       ...
                                                                ( [ 2, 4 ] );
                               %- - - - - - - - - - - - - - - - - - - - - - - - 
                                  stemWidth = ( 2.0 *                        ...
                                                max( maximumAxesValues ) ) / ...
                                              300.0;
                               %}-----------------------------------------------
                              elseif                                         ...
                                ( numberAxesLimitValues == 6 )
                               %{-----------------------------------------------
                               %  There are six axes limit values.
                               %- - - - - - - - - - - - - - - - - - - - - - - - 
                               %  This plot must be three dimensional.
                               %- - - - - - - - - - - - - - - - - - - - - - - - 
                               %  Determine the default arrow stem width
                               %  for a three dimensional plot.
                               %------------------------------------------------
                                  maximumAxesValues  = axesLimitValues       ...
                                                                ( [ 2, 4, 6 ] );
                               %- - - - - - - - - - - - - - - - - - - - - - - - 
                                  stemWidth = ( 2.0 *                        ...
                                                max( maximumAxesValues ) ) / ...
                                              300.0;
                               %}-----------------------------------------------
                              end;
                           %}---------------------------------------------------
                          end;
                       %--------------------------------------------------------
                       %  Generate a warning message.
                       %--------------------------------------------------------
                          [                                                  ...
                            warningMessage1                                  ...
                          ] =                                                ...
                          sprintf                                            ...
                           (                                                 ...
                             [                                               ...
                               '\n\n\n'                                      ...
                               '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'            ...
                               '%s%f%s\n'                                    ...
                               '%s\n%s\n'                                    ...
                               '\n\n\n'                                      ...
                             ],                                              ...
                             '--------------------------------------------', ...
                             '|',                                            ...
                             '| WARNING:',                                   ...
                             '|',                                            ...
                             '|   Arrow stem width must be a positive',      ...
                             '|   real number.',                             ...
                             '|',                                            ...
                             '|   Arrow stem width will be set to the',      ...
                             '|   default value ',                           ...
                             stemWidth,                                      ...
                             '.',                                            ...
                             '|',                                            ...
                             '--------------------------------------------'  ...
                           );
                       %--------------------------------------------------------
                       %  Display the warning message.
                       %--------------------------------------------------------
                          warning( '%s', warningMessage1 );
                       %}-------------------------------------------------------
                      end;
                   %}-----------------------------------------------------------
             %------------------------------------------------------------------
                case( 'tipwidth' )
                   %{-----------------------------------------------------------
                   %  Current property name is the width of the arrow tip.
                   %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                   %  Check the property value.
                   %------------------------------------------------------------
                      if(                                                    ...
                          ( isnumeric( currentPropertyValue ) == true ) &&   ...
                          ( isreal(    currentPropertyValue ) == true ) &&   ...
                          (            currentPropertyValue   >= 0.0  )      ...
                        )
                       %{-------------------------------------------------------
                       %  Current arrow tip width is a positive real number.
                       %- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                       %  Assign current property value as the arrow
                       %  tip width.
                       %--------------------------------------------------------
                          tipWidth = currentPropertyValue;
                       %}-------------------------------------------------------
                      else
                       %{-------------------------------------------------------
                       %  Current arrow tip width is not a positive real
                       %  number.
                       %- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                       %  Generate a warning message.
                       %--------------------------------------------------------
                          [                                                  ...
                            warningMessage2                                  ...
                          ] =                                                ...
                          sprintf                                            ...
                           (                                                 ...
                             [                                               ...
                               '\n\n\n'                                      ...
                               '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'    ...
                               '%s\n'                                        ...
                               '\n\n\n'                                      ...
                             ],                                              ...
                             '--------------------------------------------', ...
                             '|',                                            ...
                             '| WARNING:',                                   ...
                             '|',                                            ...
                             '|   Arrow tip width must be a positive',       ...
                             '|   real number.',                             ...
                             '|',                                            ...
                             '|   Arrow tip width will be set to a',         ...
                             '|   default value.',                           ...
                             '|',                                            ...
                             '--------------------------------------------'  ...
                           );
                       %--------------------------------------------------------
                       %  Display the warning message.
                       %--------------------------------------------------------
                          warning( '%s', warningMessage2 );
                       %}-------------------------------------------------------
                      end;
                   %}-----------------------------------------------------------
             %------------------------------------------------------------------
                otherwise
                   %{-----------------------------------------------------------
                   %  Default case for the Property Name.
                   %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                   %  Assume this Property is a Standard Matlab Property.
                   %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                   %  Append the Property Name and the Property Value to the
                   %  cell array of Property Names and Property Values.
                   %------------------------------------------------------------
                      standardMatlabPropertyNamesCellArray =                 ...
                              {                                              ...
                                standardMatlabPropertyNamesCellArray{ : },   ...
                                currentPropertyName                          ...
                              };
                      standardMatlabPropertyValuesCellArray =                ...
                              {                                              ...
                                standardMatlabPropertyValuesCellArray{ : },  ...
                                currentPropertyValue                         ...
                              };
                   %}-----------------------------------------------------------
             %}-----------------------------------------------------------------
        end;
     %}-------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
%  Define default parameter values.
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%  Inspect arrow stem width value existence.
%-------------------------------------------------------------------------------
   if( exist( 'stemWidth', 'var' ) == false )
    %{--------------------------------------------------------------------------
    %  The stem width variable has not yet been created.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Determine a default value for the arrow stem
    %  width (based on the plot dimensionality).
    %---------------------------------------------------------------------------
       axesLimitValues  = axis;
       axesLimitsLength = length( axesLimitValues );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       if( axesLimitsLength == 4 )
        %{----------------------------------------------------------------------
        %  The number of axes limits is 4.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  This plot must be two dimensional.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Determine the default arrow stem width for a two dimensional plot.
        %-----------------------------------------------------------------------
           maximumAxesValues = axesLimitValues( [ 2, 4 ] );
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
           stemWidth         = ( 2.0 * max( maximumAxesValues ) ) / 300.0;
        %}----------------------------------------------------------------------
       elseif                                                                ...
         ( axesLimitsLength == 6 )
        %{----------------------------------------------------------------------
        %  The number of axes limits is 6.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  This plot must be three dimensional.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Determine the default arrow stem width for a three dimensional plot.
        %-----------------------------------------------------------------------
           maximumAxesValues = axesLimitValues( [ 2, 4, 6 ] );
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
           stemWidth         = ( 2.0 * max( maximumAxesValues ) ) / 300.0;
        %}----------------------------------------------------------------------
       end;
    %}--------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
   if( exist( 'tipWidth', 'var' ) == false )
    %{--------------------------------------------------------------------------
    %  The arrow tip width has not yet been defined.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Check definition of the arrow stem width.
    %---------------------------------------------------------------------------
       if( exist( 'stemWidth', 'var' ) == true )
        %{----------------------------------------------------------------------
        %  The arrow stem width has been defined
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Define a default arrow tip width value in terms of the arrow stem
        %  width value.
        %-----------------------------------------------------------------------
           tipWidth = 3.0 * stemWidth;
        %}----------------------------------------------------------------------
       else
        %{----------------------------------------------------------------------
        %  The arrow stem width has not been defined
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  The arrow stem width value is needed to define a default value to
        %  the arrow tip  width value.
        %  Generate an error message.
        %-----------------------------------------------------------------------
           [                                                  ...
             errorMessage1                                    ...
           ] =                                                ...
           sprintf                                            ...
            (                                                 ...
              [                                               ...
                '\n\n\n'                                      ...
                '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'    ...
                '%s\n%s\n%s\n'                                ...
                '\n\n\n'                                      ...
              ],                                              ...
              '--------------------------------------------', ...
              '|',                                            ...
              '| ERROR:',                                     ...
              '|',                                            ...
              '|   Arrow stem width value is not defined.',   ...
              '|',                                            ...
              '|   Arrow stem width value is necessary to',   ...
              '|   define a default value for the arrow',     ...
              '|   tip width.',                               ...
              '|',                                            ...
              '|   Program will terminate.',                  ...
              '|',                                            ...
              '--------------------------------------------'  ...
            );
        %-----------------------------------------------------------------------
        %  Terminate the program.
        %-----------------------------------------------------------------------
           error( '%s', errorMessage1 );
        %}----------------------------------------------------------------------
       end;
    %}--------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
   degreesPerRadian    = 180.0 / pi;
   radiansPerDegree    = 1.0   / degreesPerRadian;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   tipAngleDegrees     = 22.5;
   tipAngleRadians     = radiansPerDegree * tipAngleDegrees;
   tipHalfAngleRadians = tipAngleRadians / 2.0;
%-------------------------------------------------------------------------------
   tipLength           = tipWidth / tan( tipHalfAngleRadians );
%-------------------------------------------------------------------------------
   arrowVector         = arrowEndPoint( : ) - arrowStartPoint( : );
   arrowLength         = norm( arrowVector );
%-------------------------------------------------------------------------------
%  Define an ( x,y,z ) coordinate system.
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%  NOTE(s):
%    [ 1 ] x is unit vector in direction of arrow.
%    [ 2 ] y is unit vector in (x,y) plane perpendicular to arrow.
%    [ 3 ] z is unit vector perpendicular to both arrow vector and y.
%-------------------------------------------------------------------------------
   yAxis               = [ 0.0; 1.0; 0.0 ];
   zAxis               = [ 0.0; 0.0; 1.0 ];
%-------------------------------------------------------------------------------
%  x is unit vector in direction of arrow.
%-------------------------------------------------------------------------------
   xUnitVector         = arrowVector( : ) / arrowLength;
%-------------------------------------------------------------------------------
%  y is unit vector in (x,y) plane perpendicular to arrow.
%-------------------------------------------------------------------------------
   yVector             = cross( xUnitVector, zAxis );
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   if( norm( yVector ) < 0.1 )
    %{--------------------------------------------------------------------------
    %  Y vector has small length.
    %  Perhaps X unit vector nearly parallel to z Axis vector.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Use Y axis vector instead of Z axis vector.
    %---------------------------------------------------------------------------
       yVector = cross( xUnitVector, yAxis );
    %}--------------------------------------------------------------------------
   end;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   yUnitVector = yVector / norm( yVector );
%-------------------------------------------------------------------------------
%  z is unit vector perpendicular to both arrow vector and y.
%-------------------------------------------------------------------------------
   zVector     = cross( xUnitVector, yUnitVector );
   zUnitVector = zVector / norm( zVector );
%-------------------------------------------------------------------------------
   twoPi       = 2.0 * pi;
%-------------------------------------------------------------------------------
%  Small circle.
%  Theta is an angle around the small circle.
%-------------------------------------------------------------------------------
%  numberSmallCirclePoints = 50;
   numberSmallCirclePoints = 10;
   deltaThetaRadians       = twoPi / numberSmallCirclePoints;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   thetaAnglesRadian       = 0.0 : deltaThetaRadians : twoPi;
     sineTheta             = sin( thetaAnglesRadian );
   cosineTheta             = cos( thetaAnglesRadian );
%-------------------------------------------------------------------------------
%  Large circle.
%  Beta is an angle around the large circle.
%-------------------------------------------------------------------------------
%  numberLargeCirclePoints = 250;
   numberLargeCirclePoints =  20;
   deltaBetaRadians        = twoPi / numberLargeCirclePoints;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   betaAnglesRadian        = 0.0 : deltaBetaRadians : twoPi;
     sineBeta              = sin( betaAnglesRadian );
   cosineBeta              = cos( betaAnglesRadian );
%-------------------------------------------------------------------------------
%  Allocate storage for face matrix.
%-------------------------------------------------------------------------------
   facesMatrix = NaN(                                                        ...
                      [                                                      ...
                        (                                                    ...
                          ( numberSmallCirclePoints + 1 ) +                  ...
                          ( numberLargeCirclePoints + 1 )                    ...
                        ),                                                   ...
                        ( numberLargeCirclePoints + 1 )                      ...
                      ]                                                      ...
                    );
%-------------------------------------------------------------------------------
%  Normal arrow vector.
%-------------------------------------------------------------------------------
   if( arrowLength > tipLength )
    %{--------------------------------------------------------------------------
    %  Length of arrow exceeds length of arrow tip.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Allocate storage for vertices.
    %---------------------------------------------------------------------------
       verticesMatrix = NaN(                                                 ...
                             [                                               ...
                               (                                             ...
                                 ( 2 * ( numberSmallCirclePoints + 1 ) )     ...
                                 +                                           ...
                                 (       numberLargeCirclePoints + 1   )     ...
                                 +                                           ...
                                 1                                           ...
                               ),                                            ...
                               3                                             ...
                             ]                                               ...
                           );
    %---------------------------------------------------------------------------
    %  Create the stem circle points.
    %---------------------------------------------------------------------------
       stemSmallCirclePoints = NaN( 3, ( numberSmallCirclePoints + 1 ) );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       for( pointIndex = 1 : ( numberSmallCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            stemSmallCirclePoints                                            ...
                ( :, pointIndex ) =                                          ...
                          ( sineTheta(   pointIndex ) * yUnitVector( : ) )   ...
                          +                                                  ...
                          ( cosineTheta( pointIndex ) * zUnitVector( : ) );
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
       stemLargeCirclePoints = NaN( 3, ( numberLargeCirclePoints + 1 ) );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       for( pointIndex = 1 : ( numberLargeCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            stemLargeCirclePoints                                            ...
                ( :, pointIndex ) =                                          ...
                          ( sineBeta(   pointIndex ) * yUnitVector( : ) )    ...
                          +                                                  ...
                          ( cosineBeta( pointIndex ) * zUnitVector( : ) );
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
    %  Create the vertices of the first stem circle at the start of the arrow
    %  stem.
    %---------------------------------------------------------------------------
       for( pointIndex = 1 : ( numberSmallCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            verticesMatrix                                                   ...
                ( pointIndex, : ) = arrowStartPoint( : ) +                   ...
                                    (                                        ...
                                      stemWidth *                            ...
                                      stemSmallCirclePoints                  ...
                                          ( :, pointIndex )                  ...
                                    );
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
    %  Create the vertices of the second stem circle.
    %---------------------------------------------------------------------------
       p3 = arrowEndPoint( : ) - ( tipLength * xUnitVector( : ) );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       for( pointIndex = 1 : ( numberSmallCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            currentPointIndex = ( numberSmallCirclePoints + 1 ) + pointIndex;
         %----------------------------------------------------------------------
            verticesMatrix                                                   ...
                ( currentPointIndex, : ) = p3( : ) +                         ...
                                           (                                 ...
                                             stemWidth *                     ...
                                             stemSmallCirclePoints           ...
                                                      ( :, pointIndex )      ...
                                           );
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
    %  Create vertices of the tip circle.
    %---------------------------------------------------------------------------
       for( pointIndex = 1 : ( numberLargeCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            currentPointIndex = ( 2 * ( numberSmallCirclePoints + 1 ) ) +    ...
                                pointIndex;
         %----------------------------------------------------------------------
            verticesMatrix                                                   ...
                ( currentPointIndex, : ) = p3( : ) +                         ...
                                           (                                 ...
                                             tipWidth *                      ...
                                             stemLargeCirclePoints           ...
                                                    ( :, pointIndex )        ...
                                           );
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
    %  Create vertex of the tip of the arrow.
    %---------------------------------------------------------------------------
       currentPointIndex = ( 2 * ( numberSmallCirclePoints + 1 ) ) +         ...
                           (       numberLargeCirclePoints + 1   ) + 1;
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       verticesMatrix                                                        ...
           ( currentPointIndex, : ) = arrowEndPoint( : );
    %---------------------------------------------------------------------------
    %  Create face of the stem circle.
    %---------------------------------------------------------------------------
       pointIndices = [ 1 : ( numberSmallCirclePoints + 1 ) ];
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       facesMatrix                                                           ...
            (                                                                ...
              1,                                                             ...
              pointIndices                                                   ...
            ) = pointIndices;
    %---------------------------------------------------------------------------
    %  Create faces of the stem cylinder.
    %---------------------------------------------------------------------------
       for( pointIndex = 1 : numberSmallCirclePoints )
         %{---------------------------------------------------------------------
            facesMatrix                                                      ...
                 (                                                           ...
                   ( pointIndex + 1 ),                                       ...
                   ( 1 : 4 )                                                 ...
                 ) =                                                         ...
                 [                                                           ...
                                                         pointIndex,         ...
                                                       ( pointIndex + 1 ),   ...
                   ( ( numberSmallCirclePoints + 1 ) + ( pointIndex + 1 )  ),...
                   ( ( numberSmallCirclePoints + 1 ) +   pointIndex        ) ...
                 ];
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
    %  Create face of the tip circle.
    %---------------------------------------------------------------------------
       facesMatrix                                                           ...
            (                                                                ...
              ( numberSmallCirclePoints + 2 ),                               ...
              :                                                              ...
            ) = [                                                            ...
                  ( ( 2 * ( numberSmallCirclePoints + 1 ) ) + 1 )            ...
                  :                                                          ...
                  ( ( 2 * ( numberSmallCirclePoints + 1 ) ) + 1 ) +          ...
                            numberLargeCirclePoints                          ...
                ];
    %---------------------------------------------------------------------------
    %  Create faces of the tip cone.
    %---------------------------------------------------------------------------
       for( pointIndex = 1 : numberLargeCirclePoints )
         %{---------------------------------------------------------------------
            currentPointIndex = ( numberSmallCirclePoints + 1 ) +            ...
                                ( pointIndex              + 1 );
         %----------------------------------------------------------------------
            facesMatrix                                                      ...
             (                                                               ...
               currentPointIndex,                                            ...
               1 : 3                                                         ...
             ) =                                                             ...
             [                                                               ...
               ( 2 * ( numberSmallCirclePoints + 1 ) ) +   pointIndex,       ...
               ( 2 * ( numberSmallCirclePoints + 1 ) ) + ( pointIndex + 1 ), ...
               ( 2 * ( numberSmallCirclePoints + 1 ) ) +                     ...
                     ( numberLargeCirclePoints + 1 )   + 1                   ...
             ];
         %}---------------------------------------------------------------------
       end;
    %}--------------------------------------------------------------------------
   else
    %{--------------------------------------------------------------------------
    %  Length of arrow does not exceed length of arrow tip.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Allocate storage for vertices.
    %---------------------------------------------------------------------------
       verticesMatrix = NaN(                                                 ...
                             [                                               ...
                               ( ( numberLargeCirclePoints + 1 ) + 1 ),      ...
                               3                                             ...
                             ]                                               ...
                           );
    %---------------------------------------------------------------------------
    %  Arrow will consist only of the arrow tip (there is no arrow stem).
    %---------------------------------------------------------------------------
       tipWidth = ( 2.0 * sin( tipHalfAngleRadians ) ) * arrowLength;
    %---------------------------------------------------------------------------
    %  Create the stem circle points.
    %---------------------------------------------------------------------------
       stemLargeCirclePoints = NaN( 3, ( numberLargeCirclePoints + 1 ) );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       for( pointIndex = 1 : ( numberLargeCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            stemLargeCirclePoints                                            ...
                ( :, pointIndex ) =                                          ...
                          ( sineBeta(   pointIndex ) * yUnitVector( : ) )    ...
                          +                                                  ...
                          ( cosineBeta( pointIndex ) * zUnitVector( : ) );
         %}---------------------------------------------------------------------
       end;
    %---------------------------------------------------------------------------
    %  Create vertices of the tip circle.
    %---------------------------------------------------------------------------
       for( pointIndex = 1 : ( numberLargeCirclePoints + 1 ) )
         %{---------------------------------------------------------------------
            verticesMatrix                                                   ...
                    ( pointIndex, : ) = arrowStartPoint( : ) +               ...
                                        (                                    ...
                                          tipWidth *                         ...
                                          stemLargeCirclePoints              ...
                                                   ( :, pointIndex )         ...
                                        );
         %}---------------------------------------------------------------------
       end
    %---------------------------------------------------------------------------
    %  Create vertex of the arrow tip.
    %---------------------------------------------------------------------------
       verticesMatrix                                                        ...
               (                                                             ...
                 ( numberLargeCirclePoints + 2 ),                            ...
                 :                                                           ...
               ) = arrowEndPoint( : );
    %---------------------------------------------------------------------------
    %  Create face of the tip circle
    %---------------------------------------------------------------------------
       facesMatrix( 1, : ) = [ 1 : ( numberLargeCirclePoints + 1 ) ];
    %---------------------------------------------------------------------------
    %  Create faces of the tip cone.
    %---------------------------------------------------------------------------
       for( pointIndex = 1 : numberLargeCirclePoints )
         %{---------------------------------------------------------------------
            facesMatrix                                                      ...
                 (                                                           ...
                   pointIndex + 1,                                           ...
                   1 : 3                                                     ...
                 ) = [                                                       ...
                         pointIndex,                                         ...
                       ( pointIndex + 1 ),                                   ...
                       ( numberLargeCirclePoints + 2 )                       ...
                     ];
         %}---------------------------------------------------------------------
       end;
    %}--------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
%  Draw the arrow patch graphics object.
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%  NOTE(s):
%    [ 1 ]  The Matlab function 'patch' creates one or more polygons using
%           the content of an input argument which is a data structure.
%    [ 2 ]  The data structure fields correspond to patch property names and
%           the data structure field values corresponding to property values.
%-------------------------------------------------------------------------------
   facesAndVertices.faces    =    facesMatrix;
   facesAndVertices.vertices = verticesMatrix;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   arrowPatchGraphicsHandle = patch( facesAndVertices );
%-------------------------------------------------------------------------------
%  Set the standard Matlab properties for the patch graphics object.
%-------------------------------------------------------------------------------
   numberProperties = numel( standardMatlabPropertyNamesCellArray );
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   for( propertyIndex = 1 : numberProperties )
     %{-------------------------------------------------------------------------
        currentStandardMatlabPropertyName  =                                 ...
                                     standardMatlabPropertyNamesCellArray    ...
                                                           { propertyIndex };
        currentStandardMatlabPropertyValue =                                 ...
                                     standardMatlabPropertyValuesCellArray   ...
                                                           { propertyIndex };
     %--------------------------------------------------------------------------
        try
         %{---------------------------------------------------------------------
            set(                                                             ...
                 arrowPatchGraphicsHandle,                                   ...
                 currentStandardMatlabPropertyName,                          ...
                 currentStandardMatlabPropertyValue                          ...
               );
         %}---------------------------------------------------------------------
        catch matlabExceptionObject
         %{---------------------------------------------------------------------
            STDERR = 2;
         %----------------------------------------------------------------------
            fprintf                                                          ...
             (                                                               ...
               STDERR,                                                       ...
               [                                                             ...
                 '\n\n\n'                                                    ...
                 '%s\n%s\n%s\n%s\n'                                          ...
                 '%s%s\n'                                                    ...
                 '%s\n'                                                      ...
                 '%s%s\n'                                                    ...
                 '%s\n%s\n'                                                  ...
                 '\n\n\n'                                                    ...
               ],                                                            ...
               '==========================================================', ...
               '|',                                                          ...
               '| ERROR:',                                                   ...
               '|',                                                          ...
               '|   ',                                                       ...
               matlabExceptionObject.identifier,                             ...
               '|',                                                          ...
               '|   ',                                                       ...
               matlabExceptionObject.message,                                ...
               '|',                                                          ...
               '=========================================================='  ...
             );
         %}---------------------------------------------------------------------
        end;
     %}-------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
   return;
%}------------------------------------------------------------------------------


%===============================================================================
function                                                                     ...
[                                                                            ...
  purposeMessageString                                                       ...
] =                                                                          ...
generatePurposeMessage(  )
%{------------------------------------------------------------------------------
   purposeMessageFormattingString =                                          ...
          [                                                                  ...
            '\n\n\n',                                                        ...
            '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                               ...
            '%s%s\n'                                                         ...
            '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                       ...
            '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                       ...
            '%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                                   ...
            '\n\n\n'                                                         ...
          ];
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   [                                                                         ...
     purposeMessageString                                                    ...
   ] =                                                                       ...
    sprintf                                                                  ...
     (                                                                       ...
       purposeMessageFormattingString,                                       ...
       '==================================================================', ...
       '|',                                                                  ...
       '| UNCLASSIFIED',                                                     ...
       '|',                                                                  ...
       '|=================================================================', ...
       '|',                                                                  ...
       '|',                                                                  ...
       '|  FUNCTION:',                                                       ...
       '|    ',                                                              ...
       mfilename,                                                            ...
       '|',                                                                  ...
       '|  PURPOSE:',                                                        ...
       '|    Plot a 3D arrow as patch object ( cylinder + cone ).',          ...
       '|',                                                                  ...
       '|  INPUT(s):',                                                       ...
       '|',                                                                  ...
       '|    arrowStartPoint',                                               ...
       '|       Arrow vector starting point in 3D.',                         ...
       '|',                                                                  ...
       '|    arrowEndPoint',                                                 ...
       '|       Arrow vector   ending point in 3D.',                         ...
       '|',                                                                  ...
       '|    varargin',                                                      ...
       '|       Variable list of arguments in the format:',                  ...
       '|',                                                                  ...
       '|         ''PropertyName'',          PropertyValue',                 ...
       '|',                                                                  ...
       '|  OUTPUT(s):',                                                      ...
       '|',                                                                  ...
       '|    arrowPatchGraphicsHandle',                                      ...
       '|       Handle to arrow vector 3D graphics patch object.',           ...
       '|',                                                                  ...
       '|=================================================================', ...
       '|',                                                                  ...
       '| UNCLASSIFIED',                                                     ...
       '|',                                                                  ...
       '=================================================================='  ...
     );
%-------------------------------------------------------------------------------
   return;
%}------------------------------------------------------------------------------


%===============================================================================
function                                                                     ...
[                                                                            ...
  usageMessageString                                                         ...
] =                                                                          ...
generateUsageMessage(  )
%{------------------------------------------------------------------------------
   usageMessageFormattingString =                                            ...
        [                                                                    ...
          '\n\n\n'                                                           ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                             ...
          '%s%s%s\n'                                                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                             ...
          '%s%s%s\n'                                                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                                     ...
          '%s%s%s\n'                                                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                                     ...
          '%s%s%s\n'                                                         ...
          '%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                         ...
          '\n\n\n'                                                           ...
        ];
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   [                                                                         ...
     usageMessageString                                                      ...
   ] =                                                                       ...
    sprintf                                                                  ...
     (                                                                       ...
       usageMessageFormattingString,                                         ...
       '----------------------------------------------------------------',   ...
       '|',                                                                  ...
       '| USAGE:',                                                           ...
       '|',                                                                  ...
       '|  SYNTAX:',                                                         ...
       '|    [ 1 ] Simple:',                                                 ...
       '|',                                                                  ...
       '|            [                                            ...',      ...
       '|              arrowPatchGraphicsHandle                   ...',      ...
       '|            ] = ',                                                  ...
       mfilename,                                                            ...
       '                                  ...',                              ...
       '|                 (                                       ...',      ...
       '|                   arrowStartPoint,                      ...',      ...
       '|                   arrowEndPoint                         ...',      ...
       '|                 );',                                               ...
       '|',                                                                  ...
       '|    [ 2 ] Involved:',                                               ...
       '|',                                                                  ...
       '|            [                                            ...',      ...
       '|              arrowPatchGraphicsHandle                   ...',      ...
       '|            ] = ',                                                  ...
       mfilename,                                                            ...
       '                                  ...',                              ...
       '|                 (                                       ...',      ...
       '|                   arrowStartPoint,                      ...',      ...
       '|                   arrowEndPoint,                        ...',      ...
       '|                   ''PropertyName'',    PropertyValue      ...',    ...
       '|                 );',                                               ...
       '|',                                                                  ...
       '|  NOTE(s):',                                                        ...
       '|',                                                                  ...
       '|    [ 1 ]  Properties List:',                                       ...
       '|',                                                                  ...
       '|             [ 1.1 ] ''Color''        color according to MATLAB ',  ...
       '|                                    specification',                 ...
       '|                                    (see MATLAB help item',         ...
       '|                                      ''ColorSpec'')',              ...
       '|',                                                                  ...
       '|             [ 1.2 ] ''StemWidth''    Width of the line.',          ...
       '|',                                                                  ...
       '|             [ 1.3 ] ''TipWidth''     Width of the arrow cone.',    ...
       '|',                                                                  ...
       '|             [ 1.4 ] In addition:   You can specify any patch ',    ...
       '|                                    object properties.',            ...
       '|                                    (For example,',                 ...
       '|                                     you can make the arrow',       ...
       '|                                     semitransparent by using',     ...
       '|                                     property ''faceAlpha''.)',     ...
       '|',                                                                  ...
       '|    [ 2 ]  Use light to achieve 3D impression.',                    ...
       '|',                                                                  ...
       '|    [ 3 ]  A patch graphics object is composed of one or more',     ...
       '|           polygons that may or may not be connected.',             ...
       '|           Patches are useful for modeling real-world objects',     ...
       '|           such as airplanes or automobiles,',                      ...
       '|           and for drawing 2- or 3-D polygons of arbitrary shape.', ...
       '|',                                                                  ...
       '|           [ 3.1 ]  In contrast, surface objects are rectangular',  ...
       '|                    grid of quadrilaterals and are better suited',  ...
       '|                    for displaying planar topographies such as',    ...
       '|                    the values of mathematical functions',          ...
       '|                    of two variables, the contours of data in a',   ...
       '|                    rectangular plane, or parameterized surfaces',  ...
       '|                    such as spheres.',                              ...
       '|',                                                                  ...
       '|           [ 3.2 ]  A number of MATLAB® functions create patch',    ... 
       '|                    objects:  fill, fill3, isosurface, isocaps,',   ...
       '|                    some of the contour functions, and patch.',     ...
       '|',                                                                  ...
       '|  EXAMPLE(s):',                                                     ...
       '|                       ',                                           ...
       '|    [ 1 ]  Draw an arrow from starting point to ending point',      ...
       '|           with default properties:',                                ...
       '|',                                                                  ...
       '|           startingPoint = [ 0.0; 0.0; 0.0 ];',                     ...
       '|',                                                                  ...
       '|             endingPoint = [ 1.0; 1.0; 1.0 ];',                     ...
       '|',                                                                  ...
       '|           [                                           ...',        ...
       '|             arrowPatchGraphicsHandle                  ...',        ...
       '|           ] = ',                                                   ...
       mfilename,                                                            ...
       '                                 ...',                               ...
       '|                (                                      ...',        ...
       '|                  startingPoint,                       ...',        ...
       '|                    endingPoint                        ...',        ...
       '|                );',                                                ...
       '|',                                                                  ...
       '|    [ 2 ]  Draw an arrow from starting point to ending point',      ...
       '|           with:',                                                  ...
       '|             [ 2.1 ]  Red color.',                                  ...
       '|             [ 2.2 ]  Arrow stem width of 0.015.',                  ...
       '|             [ 2.3 ]  Arrow cone width of 0.030.',                  ...
       '|             [ 2.4 ]  One half semi-transparency.',                 ...
       '|',                                                                  ...
       '|           startingPoint = [ 0.0; 0.0; 0.0 ];',                     ...
       '|             endingPoint = [ 1.0; 1.0; 1.0 ];',                     ...
       '|',                                                                  ...
       '|           [                                           ...',        ...
       '|             arrowPatchGraphicsHandle                  ...',        ...
       '|           ] = ',                                                   ...
       mfilename,                                                            ...
       '                                 ...',                               ...
       '|                (                                      ...',        ...
       '|                  startingPoint,                       ...',        ...
       '|                    endingPoint,                       ...',        ...
       '|                  ''Color'',               ''Red'',        ...',    ...
       '|                  ''StemWidth'',           0.02,         ...',      ...
       '|                  ''TipWidth'',            0.01,         ...',      ...
       '|                  ''FaceAlpha'',           0.50          ...',      ...
       '|                );',                                                ...
       '|',                                                                  ...
       '----------------------------------------------------------------'    ...
     );
%-------------------------------------------------------------------------------
   return;
%}------------------------------------------------------------------------------


%===============================================================================
